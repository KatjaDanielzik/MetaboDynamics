// Generated by rstantools.  Do not edit by hand.

/*
    MetaboDynamics is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MetaboDynamics is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MetaboDynamics.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_m_ANOVA_partial_pooling_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 63> locations_array__ =
  {" (found before start of program)",
  " (in 'm_ANOVA_partial_pooling', line 14, column 1 to column 14)",
  " (in 'm_ANOVA_partial_pooling', line 15, column 1 to column 28)",
  " (in 'm_ANOVA_partial_pooling', line 16, column 1 to column 26)",
  " (in 'm_ANOVA_partial_pooling', line 36, column 2 to column 18)",
  " (in 'm_ANOVA_partial_pooling', line 38, column 2 to column 18)",
  " (in 'm_ANOVA_partial_pooling', line 40, column 2 to column 15)",
  " (in 'm_ANOVA_partial_pooling', line 41, column 2 to column 16)",
  " (in 'm_ANOVA_partial_pooling', line 42, column 2 to column 29)",
  " (in 'm_ANOVA_partial_pooling', line 43, column 2 to column 30)",
  " (in 'm_ANOVA_partial_pooling', line 45, column 2 to column 23)",
  " (in 'm_ANOVA_partial_pooling', line 48, column 2 to column 23)",
  " (in 'm_ANOVA_partial_pooling', line 52, column 3 to column 52)",
  " (in 'm_ANOVA_partial_pooling', line 51, column 16 to line 53, column 4)",
  " (in 'm_ANOVA_partial_pooling', line 51, column 2 to line 53, column 4)",
  " (in 'm_ANOVA_partial_pooling', line 50, column 14 to line 54, column 3)",
  " (in 'm_ANOVA_partial_pooling', line 50, column 0 to line 54, column 3)",
  " (in 'm_ANOVA_partial_pooling', line 56, column 3 to column 40)",
  " (in 'm_ANOVA_partial_pooling', line 57, column 3 to column 50)",
  " (in 'm_ANOVA_partial_pooling', line 58, column 3 to column 28)",
  " (in 'm_ANOVA_partial_pooling', line 59, column 3 to column 49)",
  " (in 'm_ANOVA_partial_pooling', line 62, column 3 to column 72)",
  " (in 'm_ANOVA_partial_pooling', line 61, column 17 to line 63, column 4)",
  " (in 'm_ANOVA_partial_pooling', line 61, column 3 to line 63, column 4)",
  " (in 'm_ANOVA_partial_pooling', line 67, column 6 to column 42)",
  " (in 'm_ANOVA_partial_pooling', line 66, column 18 to line 68, column 4)",
  " (in 'm_ANOVA_partial_pooling', line 66, column 4 to line 68, column 4)",
  " (in 'm_ANOVA_partial_pooling', line 65, column 16 to line 69, column 3)",
  " (in 'm_ANOVA_partial_pooling', line 65, column 2 to line 69, column 3)",
  " (in 'm_ANOVA_partial_pooling', line 73, column 6 to column 106)",
  " (in 'm_ANOVA_partial_pooling', line 72, column 18 to line 74, column 4)",
  " (in 'm_ANOVA_partial_pooling', line 72, column 4 to line 74, column 4)",
  " (in 'm_ANOVA_partial_pooling', line 71, column 16 to line 75, column 3)",
  " (in 'm_ANOVA_partial_pooling', line 71, column 2 to line 75, column 3)",
  " (in 'm_ANOVA_partial_pooling', line 23, column 2 to column 24)",
  " (in 'm_ANOVA_partial_pooling', line 25, column 4 to column 37)",
  " (in 'm_ANOVA_partial_pooling', line 26, column 4 to column 23)",
  " (in 'm_ANOVA_partial_pooling', line 24, column 16 to line 28, column 3)",
  " (in 'm_ANOVA_partial_pooling', line 24, column 2 to line 28, column 3)",
  " (in 'm_ANOVA_partial_pooling', line 30, column 4 to column 50)",
  " (in 'm_ANOVA_partial_pooling', line 29, column 14 to line 31, column 3)",
  " (in 'm_ANOVA_partial_pooling', line 29, column 0 to line 31, column 3)",
  " (in 'm_ANOVA_partial_pooling', line 4, column 2 to column 17)",
  " (in 'm_ANOVA_partial_pooling', line 5, column 2 to column 17)",
  " (in 'm_ANOVA_partial_pooling', line 6, column 2 to column 17)",
  " (in 'm_ANOVA_partial_pooling', line 7, column 10 to column 11)",
  " (in 'm_ANOVA_partial_pooling', line 7, column 2 to column 13)",
  " (in 'm_ANOVA_partial_pooling', line 8, column 17 to column 18)",
  " (in 'm_ANOVA_partial_pooling', line 8, column 2 to column 20)",
  " (in 'm_ANOVA_partial_pooling', line 9, column 18 to column 19)",
  " (in 'm_ANOVA_partial_pooling', line 9, column 2 to column 21)",
  " (in 'm_ANOVA_partial_pooling', line 14, column 9 to column 10)",
  " (in 'm_ANOVA_partial_pooling', line 14, column 11 to column 12)",
  " (in 'm_ANOVA_partial_pooling', line 15, column 23 to column 24)",
  " (in 'm_ANOVA_partial_pooling', line 15, column 25 to column 26)",
  " (in 'm_ANOVA_partial_pooling', line 16, column 23 to column 24)",
  " (in 'm_ANOVA_partial_pooling', line 36, column 15 to column 16)",
  " (in 'm_ANOVA_partial_pooling', line 38, column 13 to column 14)",
  " (in 'm_ANOVA_partial_pooling', line 38, column 15 to column 16)",
  " (in 'm_ANOVA_partial_pooling', line 45, column 16 to column 17)",
  " (in 'm_ANOVA_partial_pooling', line 45, column 18 to column 21)",
  " (in 'm_ANOVA_partial_pooling', line 48, column 16 to column 17)",
  " (in 'm_ANOVA_partial_pooling', line 48, column 18 to column 21)"};
#include <stan_meta_header.hpp>
class model_m_ANOVA_partial_pooling final : public model_base_crtp<model_m_ANOVA_partial_pooling> {
private:
  int N;
  int M;
  int t;
  std::vector<double> y;
  std::vector<int> X;
  std::vector<int> Me;
  int eff_size_2dim__;
  int delta_mu_2dim__;
public:
  ~model_m_ANOVA_partial_pooling() {}
  model_m_ANOVA_partial_pooling(stan::io::var_context& context__,
                                unsigned int random_seed__ = 0, std::ostream*
                                pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_m_ANOVA_partial_pooling_namespace::model_m_ANOVA_partial_pooling";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 42;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 42;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 42;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 43;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 44;
      context__.validate_dims("data initialization", "t", "int",
        std::vector<size_t>{});
      t = std::numeric_limits<int>::min();
      current_statement__ = 44;
      t = context__.vals_i("t")[(1 - 1)];
      current_statement__ = 44;
      stan::math::check_greater_or_equal(function__, "t", t, 0);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 46;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      y = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 46;
      y = context__.vals_r("y");
      current_statement__ = 47;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "X", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      X = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 48;
      X = context__.vals_i("X");
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "X", X, 0);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("Me", "N", N);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "Me", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      Me = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 50;
      Me = context__.vals_i("Me");
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "Me", Me, 0);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("mu", "M", M);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("mu", "t", t);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("sigma", "M", M);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("sigma", "t", t);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("lambda", "M", M);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("log_lik", "N", N);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("y_rep", "M", M);
      current_statement__ = 58;
      stan::math::validate_non_negative_index("y_rep", "t", t);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("eff_size", "M", M);
      current_statement__ = 60;
      eff_size_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 60;
      eff_size_2dim__ = (t - 1);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("eff_size", "t - 1",
        eff_size_2dim__);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("delta_mu", "M", M);
      current_statement__ = 62;
      delta_mu_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 62;
      delta_mu_2dim__ = (t - 1);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("delta_mu", "t - 1",
        delta_mu_2dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (M * t) + (M * t) + M;
  }
  inline std::string model_name() const final {
    return "model_m_ANOVA_partial_pooling";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_m_ANOVA_partial_pooling_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<std::vector<local_scalar_t__>> mu =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(t, DUMMY_VAR__));
      current_statement__ = 1;
      mu = in__.template read<std::vector<std::vector<local_scalar_t__>>>(M,
             t);
      std::vector<std::vector<local_scalar_t__>> sigma =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(t, DUMMY_VAR__));
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<
                std::vector<std::vector<local_scalar_t__>>, jacobian__>(0,
                lp__, M, t);
      std::vector<local_scalar_t__> lambda =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 3;
      lambda = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, M);
      {
        current_statement__ = 34;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(lambda, 2));
        current_statement__ = 38;
        for (int m = 1; m <= M; ++m) {
          current_statement__ = 35;
          lp_accum__.add(stan::math::exponential_lpdf<propto__>(
                           stan::model::rvalue(sigma, "sigma",
                             stan::model::index_uni(m),
                             stan::model::index_omni()),
                           stan::model::rvalue(lambda, "lambda",
                             stan::model::index_uni(m))));
          current_statement__ = 36;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(mu, "mu",
                             stan::model::index_uni(m),
                             stan::model::index_omni()), 0, 2));
        }
        current_statement__ = 41;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 39;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(y, "y",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(mu, "mu",
                             stan::model::index_uni(
                               stan::model::rvalue(Me, "Me",
                                 stan::model::index_uni(i))),
                             stan::model::index_uni(
                               stan::model::rvalue(X, "X",
                                 stan::model::index_uni(i)))),
                           stan::model::rvalue(sigma, "sigma",
                             stan::model::index_uni(
                               stan::model::rvalue(Me, "Me",
                                 stan::model::index_uni(i))),
                             stan::model::index_uni(
                               stan::model::rvalue(X, "X",
                                 stan::model::index_uni(i))))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_m_ANOVA_partial_pooling_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<std::vector<double>> mu =
        std::vector<std::vector<double>>(M,
          std::vector<double>(t, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 1;
      mu = in__.template read<std::vector<std::vector<local_scalar_t__>>>(M,
             t);
      std::vector<std::vector<double>> sigma =
        std::vector<std::vector<double>>(M,
          std::vector<double>(t, std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<
                std::vector<std::vector<local_scalar_t__>>, jacobian__>(0,
                lp__, M, t);
      std::vector<double> lambda =
        std::vector<double>(M, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      lambda = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, M);
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          out__.write(mu[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          out__.write(sigma[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(lambda);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<double> log_lik =
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<std::vector<double>> y_rep =
        std::vector<std::vector<double>>(M,
          std::vector<double>(t, std::numeric_limits<double>::quiet_NaN()));
      double y_prior = std::numeric_limits<double>::quiet_NaN();
      double mu_prior = std::numeric_limits<double>::quiet_NaN();
      double sigma_prior = std::numeric_limits<double>::quiet_NaN();
      double lambda_prior = std::numeric_limits<double>::quiet_NaN();
      std::vector<std::vector<double>> eff_size =
        std::vector<std::vector<double>>(M,
          std::vector<double>(eff_size_2dim__,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<double>> delta_mu =
        std::vector<std::vector<double>>(M,
          std::vector<double>(delta_mu_2dim__,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 16;
      for (int m = 1; m <= M; ++m) {
        current_statement__ = 14;
        for (int i = 1; i <= t; ++i) {
          current_statement__ = 12;
          stan::model::assign(y_rep,
            stan::math::student_t_rng(2,
              stan::model::rvalue(mu, "mu", stan::model::index_uni(m),
                stan::model::index_uni(i)),
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(m),
                stan::model::index_uni(i)), base_rng__),
            "assigning variable y_rep", stan::model::index_uni(m),
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 17;
      lambda_prior = stan::math::abs(
                       stan::math::exponential_rng(2, base_rng__));
      current_statement__ = 18;
      sigma_prior = stan::math::abs(
                      stan::math::exponential_rng(lambda_prior, base_rng__));
      current_statement__ = 19;
      mu_prior = stan::math::normal_rng(0, 2, base_rng__);
      current_statement__ = 20;
      y_prior = stan::math::student_t_rng(2, mu_prior, sigma_prior,
                  base_rng__);
      current_statement__ = 23;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 21;
        stan::model::assign(log_lik,
          stan::math::student_t_lpdf<false>(
            stan::model::rvalue(y, "y", stan::model::index_uni(n)), 2,
            stan::model::rvalue(mu, "mu",
              stan::model::index_uni(
                stan::model::rvalue(Me, "Me", stan::model::index_uni(n))),
              stan::model::index_uni(
                stan::model::rvalue(X, "X", stan::model::index_uni(n)))),
            stan::model::rvalue(sigma, "sigma",
              stan::model::index_uni(
                stan::model::rvalue(Me, "Me", stan::model::index_uni(n))),
              stan::model::index_uni(
                stan::model::rvalue(X, "X", stan::model::index_uni(n))))),
          "assigning variable log_lik", stan::model::index_uni(n));
      }
      current_statement__ = 28;
      for (int m = 1; m <= M; ++m) {
        current_statement__ = 26;
        for (int i = 2; i <= t; ++i) {
          current_statement__ = 24;
          stan::model::assign(delta_mu,
            (stan::model::rvalue(mu, "mu", stan::model::index_uni(m),
               stan::model::index_uni((i - 1))) -
            stan::model::rvalue(mu, "mu", stan::model::index_uni(m),
              stan::model::index_uni(i))), "assigning variable delta_mu",
            stan::model::index_uni(m), stan::model::index_uni((i - 1)));
        }
      }
      current_statement__ = 33;
      for (int m = 1; m <= M; ++m) {
        current_statement__ = 31;
        for (int i = 2; i <= t; ++i) {
          current_statement__ = 29;
          stan::model::assign(eff_size,
            ((stan::model::rvalue(mu, "mu", stan::model::index_uni(m),
                stan::model::index_uni((i - 1))) -
            stan::model::rvalue(mu, "mu", stan::model::index_uni(m),
              stan::model::index_uni(i))) /
            stan::math::sqrt(
              (((stan::model::rvalue(sigma, "sigma",
                   stan::model::index_uni(m), stan::model::index_uni((i - 1)))
              *
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(m),
                stan::model::index_uni((i - 1)))) +
              (stan::model::rvalue(sigma, "sigma", stan::model::index_uni(m),
                 stan::model::index_uni(i)) *
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(m),
                stan::model::index_uni(i)))) / 2))),
            "assigning variable eff_size", stan::model::index_uni(m),
            stan::model::index_uni((i - 1)));
        }
      }
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "sigma_prior",
        sigma_prior, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "lambda_prior",
        lambda_prior, 0);
      out__.write(log_lik);
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          out__.write(y_rep[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(y_prior);
      out__.write(mu_prior);
      out__.write(sigma_prior);
      out__.write(lambda_prior);
      for (int sym1__ = 1; sym1__ <= eff_size_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          out__.write(eff_size[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= delta_mu_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          out__.write(delta_mu[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<std::vector<local_scalar_t__>> mu =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(t, DUMMY_VAR__));
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        current_statement__ = 1;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 1;
          mu[(sym2__ - 1)][(sym1__ - 1)] = in__.read<local_scalar_t__>();
        }
      }
      out__.write(mu);
      std::vector<std::vector<local_scalar_t__>> sigma =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(t, DUMMY_VAR__));
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        current_statement__ = 2;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 2;
          sigma[(sym2__ - 1)][(sym1__ - 1)] = in__.read<local_scalar_t__>();
        }
      }
      out__.write_free_lb(0, sigma);
      std::vector<local_scalar_t__> lambda =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(lambda,
        in__.read<std::vector<local_scalar_t__>>(M),
        "assigning variable lambda");
      out__.write_free_lb(0, lambda);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(t)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(t)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "lambda", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<std::vector<local_scalar_t__>> mu =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(t, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> mu_flat__;
        current_statement__ = 1;
        mu_flat__ = context__.vals_r("mu");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(mu, mu_flat__[(pos__ - 1)],
              "assigning variable mu", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(mu);
      std::vector<std::vector<local_scalar_t__>> sigma =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(t, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> sigma_flat__;
        current_statement__ = 2;
        sigma_flat__ = context__.vals_r("sigma");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
          current_statement__ = 2;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 2;
            stan::model::assign(sigma, sigma_flat__[(pos__ - 1)],
              "assigning variable sigma", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 2;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_lb(0, sigma);
      std::vector<local_scalar_t__> lambda =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 3;
      lambda = context__.vals_r("lambda");
      out__.write_free_lb(0, lambda);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"mu", "sigma", "lambda"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"log_lik", "y_rep", "y_prior", "mu_prior", "sigma_prior",
             "lambda_prior", "eff_size", "delta_mu"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(M),
                                                 static_cast<size_t>(t)},
                std::vector<size_t>{static_cast<size_t>(M),
                  static_cast<size_t>(t)},
                std::vector<size_t>{static_cast<size_t>(M)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(t)}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(eff_size_2dim__)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(delta_mu_2dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
        param_names__.emplace_back(std::string() + "sigma" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "y_rep" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      param_names__.emplace_back(std::string() + "y_prior");
      param_names__.emplace_back(std::string() + "mu_prior");
      param_names__.emplace_back(std::string() + "sigma_prior");
      param_names__.emplace_back(std::string() + "lambda_prior");
      for (int sym1__ = 1; sym1__ <= eff_size_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "eff_size" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= delta_mu_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "delta_mu" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
        param_names__.emplace_back(std::string() + "sigma" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "y_rep" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      param_names__.emplace_back(std::string() + "y_prior");
      param_names__.emplace_back(std::string() + "mu_prior");
      param_names__.emplace_back(std::string() + "sigma_prior");
      param_names__.emplace_back(std::string() + "lambda_prior");
      for (int sym1__ = 1; sym1__ <= eff_size_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "eff_size" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= delta_mu_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "delta_mu" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(t) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(t) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(t) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"lambda_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"eff_size\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(eff_size_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"delta_mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(delta_mu_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(t) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(t) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(t) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"y_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"sigma_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"lambda_prior\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"eff_size\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(eff_size_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"delta_mu\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(delta_mu_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((M * t) + (M * t)) + M);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * ((((((((N +
      (M * t)) + 1) + 1) + 1) + 1) + (M * eff_size_2dim__)) + (M *
      delta_mu_2dim__)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((M * t) + (M * t)) + M);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * ((((((((N +
      (M * t)) + 1) + 1) + 1) + 1) + (M * eff_size_2dim__)) + (M *
      delta_mu_2dim__)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_m_ANOVA_partial_pooling_namespace::model_m_ANOVA_partial_pooling;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_m_ANOVA_partial_pooling_namespace::profiles__;
}
#endif
#endif
